---
title: 'Models'
author: "Katie Colborn"
date: "October 11, 2018"
output:
  html_document: default
  fig_caption: yes
  number_sections: yes
  pdf_document: default
  word_document: default
---
### **Models**
#### This lecture covers parts of Chapter 23 in R for Data Science, and also other modelling packages.
##### "The goal of a model is not to uncover truth, but to discover a simple approximation that is still useful." ~ Hadley Wickham
##### "All models are wrong, but some are useful" ~ George Box
##### I'm going to use various datasets for this lecture. Let's start by using the dataset for your R project. We've looked at various plots of the data in previous lectures. Now let's explore them and fit models based on what we see.
```{r, echo=T, message=F, warning=F}
#install.packages("tidyverse", dependencies = T)
library(tidyverse)
library(ggplot2)
library(modelr)


mal <- read.csv('C:/Users/Emma/Documents/6640 - R Python/Homework/MozProject/MozSyntheticMalaria.csv') 

mal$denom <- mal$Population_UN*mal$u5weight
mal$cpt <- (mal$malaria/mal$denom)*1000

```

##### First, let's get rid of the longitudinal structure and limit it to one week of one year. Then let's relate various variables to malaria.
```{r, echo=T, message=F, warning=F}
mal2 <- subset(mal, Epiweek==8 & Epiyear==2016) #N=141
# total rainfall
ggplot(mal2, aes(rainTot, malaria)) + 
  geom_point(aes(colour = Region))
# rainfall is very skewed, so let's take the sqrt
ggplot(mal2, aes(sqrt(rainTot), malaria)) + 
  geom_point(aes(colour = Region))
# temperature
ggplot(mal2, aes(tavg, malaria)) + 
  geom_point(aes(colour = Region))
# rh
ggplot(mal2, aes(rh, malaria)) + 
  geom_point(aes(colour = Region))
```

##### Taking the square root of rainfall total helped us to see the relationships better. Now let's fit models. We can fit linear or nonlinear. 
```{r, echo=T, message=F, warning=F}
# Rainfall
ggplot(mal2, aes(sqrt(rainTot), malaria, colour = Region)) + 
  geom_point() + 
  geom_smooth(method = 'lm') 
ggplot(mal2, aes(sqrt(rainTot), malaria, colour = Region)) + 
  geom_point() + 
  geom_smooth() 

# Temperature
ggplot(mal2, aes(tavg, malaria, colour = Region)) + 
  geom_point() + 
  geom_smooth(method = 'lm') 
ggplot(mal2, aes(tavg, malaria, colour = Region)) + 
  geom_point() + 
  geom_smooth() 
```

##### Next class we'll talk about overfitting, but today we'll use all the data to compare models. Given what we saw above, we have various choices for potential models. The first thing to decide is what family of distributions best represents our outcome, malaria cases per thousand. To make things easy for `ggplot`, I'll start with using cases per thousand in a linear model, as opposed to cases in a Poisson model with an offset.
```{r, echo=T, message=F, warning=F}


hist(mal2$malaria)
hist(mal2$cpt)

hist(log(mal2$cpt))

# Compare linear model across various covariates
mal2$sqrtRain <- sqrt(mal2$rainTot)

# LM
lm1 <- lm(cpt ~ sqrtRain + Region, data = mal2)
names(lm1)
# RMSE estimate
rss <- c(crossprod(lm1$residuals))
mse <- rss/length(lm1$residuals)
rmse <- sqrt(mse)
rmse # root mean square error

# Pearson estimated residual variance (as returned by summary.lm):
sig2 <- rss/lm1$df.residual
sig2

lm2 <- lm(cpt ~ sqrtRain * Region, data = mal2)
names(lm2)
# RMSE estimate
rss.2 <- c(crossprod(lm2$residuals))
mse.2 <- rss.2/length(lm2$residuals)
rmse.2 <- sqrt(mse.2)
rmse.2
# Pearson estimated residual variance (as returned by summary.lm):
sig2.2 <- rss.2/lm2$df.residual
sig2.2

grid <- mal2 %>% 
  data_grid(sqrtRain, Region) %>% 
  gather_predictions(lm1, lm2)
grid

ggplot(mal2, aes(sqrtRain, cpt, colour = Region)) + 
  geom_point() + 
  geom_line(data = grid, aes(y = pred)) + 
  facet_wrap(~ model)

mal3 <- mal2 %>% 
  gather_residuals(lm1, lm2)

ggplot(mal3, aes(sqrtRain, resid, colour = Region)) + 
  geom_point() + 
  facet_grid(model ~ Region)

```

##### Now let's fit more complicated models. Notice the relationship between malaria incidence and week of the year. Let's approximate this in a model, then plot the fitted values.
```{r, echo=T, message=F, warning=F}

plot(smooth.spline(mal$Epiweek, mal$cpt, df=4), col="blue", main="", xlab="Epiweek", ylab="Cases per 1,000", type="l", lwd=2)

library(lme4)
mal$sinwk <- sin(2*pi*mal$Epiweek/52)
mal$coswk <- cos(2*pi*mal$Epiweek/52)

glmer1 <- glmer(malaria ~ sinwk + coswk + (1|District), family = "poisson", offset = log(denom), data = mal) # "1|" is for random effects for intercept
summary(glmer1)

```

##### Let's plot fitted values from this model.
```{r, echo=T, message=F, warning=F}
# extract coefficients
fix1 <- fixef(glmer1)
ranef1 <- ranef(glmer1)
var1 <- var(ranef1[["District"]][["(Intercept)"]]) # extract sigma by itself as an integer

weeks <- c(1:52)
sinwk <- sin(2*pi*weeks/52)
coswk <- cos(2*pi*weeks/52)

predglmer1 <- exp(fix1[1] + fix1[2]*sinwk + fix1[3]*coswk + (var1/2))

plot(smooth.spline(weeks, predglmer1*1000), type="l", col="blue", xlim=c(1, 52), xlab="Week", ylab="Cases per 1,000", cex.lab = 1.8)

```

